int count=0;
    
    void merge(vector<int>&arr, int start, int mid, int end){
        vector<int>temp;
        int i=start;
        int j=mid+1;
        
        while(i<=mid && j<=end){
            if(arr[i]<=arr[j]){
                temp.push_back(arr[i]);
                i++;
            }
            else{
                temp.push_back(arr[j]);
                count+=mid-i+1;
                j++;
            }
        }
        
        while(i<=mid){
            temp.push_back(arr[i]);
            i++;
        }
        
        while(j<=end){
            temp.push_back(arr[j]);
            j++;
        }
        
        for(int i=start; i<=end; i++){
            arr[i]=temp[i-start];
        }
    }
    
    void ms(vector<int>&arr, int start, int end){
        if(start==end) return;
        int mid=(start+end)/2;
        ms(arr,start,mid);
        ms(arr,mid+1,end);
        merge(arr,start,mid,end);
    }
  
    int inversionCount(vector<int> &arr) {
        int n=arr.size();
        int l=0;
        int r=n-1;
        ms(arr,l,r);
        return count;
    }
